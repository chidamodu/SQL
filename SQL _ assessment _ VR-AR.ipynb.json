{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "SQL exercises\n",
    "\n",
    "Table: email_events\n",
    "Columns: user_id, event, campaign, date\n",
    "Example: dan, open, quest, 2019-07-01\n",
    "\n",
    "Question #1: Write a query that accomplishes the following: return a list of email campaigns run during June 2019 and the number of opens per campaign\n",
    "\n",
    "Quest 1,000\n",
    "Go 800\n",
    "Rift 600\n",
    "\n",
    "Questions I could asked: \n",
    "Are there null values in the table?\n",
    "Are there duplicate values in the table? (meaning: emails sent to the same customer, so there will be duplicate values)\n",
    "\n",
    "\n",
    "Pseudo:\n",
    "1. First filter records by June 2019\n",
    "2. Then filter only the opened ones out of the first step\n",
    "3. Count per campaign\n",
    "4. is it possible that emails were sent to a same customer more than one time? \n",
    "\n",
    "\n",
    "select campaign, count(event) AS event_count\n",
    "from email_events\n",
    "where event LIKE '%open%'\n",
    "groupby campaign;\n",
    "\n",
    "\n",
    "\n",
    "Select count(event) AS event_num\n",
    "from\n",
    "(\n",
    "Select *\n",
    "from email_events\n",
    "where MONTH(date)=6\n",
    "#YEAR(date)='2019'#quest is only released in 2019 so this is not necessary\n",
    ")\n",
    "where event like '%open%'\n",
    "groupby campaign;\n",
    "\n",
    "\n",
    "If there are duplicate values then can groupby userid as well, but this entirely depends on the context. Maybe it is compeltely ok to target the same customers many times a month.\n",
    "\n",
    "\n",
    "Table #2: user_info\n",
    "Columns: user_id, age, gender\n",
    "Example: dan, 30, male\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Question #2: write a query that returns the campaigns that had the most clicks among women age 20-29\n",
    "\n",
    "I did not even realize that I had join the tables: email_events and user_info for the Question #2\n",
    "\n",
    "1.\n",
    "select * from email_events e\n",
    "inner join \n",
    "select * from user_info u\n",
    "on e.user_id=u.user_id\n",
    "\n",
    "At the end of step 1: I will have the columns as: user_id, event, campaign, date, age, gender\n",
    "\n",
    "2. \n",
    "select fog.campaign AS campaign_det, count(fog.event) AS num_event, fog.age AS age_det\n",
    "from \n",
    "(\n",
    "select * from email_events e\n",
    "inner join \n",
    "select * from user_info u\n",
    "on e.user_id=u.user_id\n",
    ") fog\n",
    "where fog.event like '%clicks%' AND fog.gender like '%female%'\n",
    "groupby campaign_det;\n",
    "\n",
    "3. Final query output\n",
    "\n",
    "select rain.campaign_det AS campaign, rain.num_event AS event_count\n",
    "from \n",
    "(\n",
    "select fog.campaign AS campaign_det, count(fog.event) AS num_event, fog.age AS age_det\n",
    "from \n",
    "(\n",
    "select * from email_events e\n",
    "inner join \n",
    "select * from user_info u\n",
    "on e.user_id=u.user_id\n",
    ") fog\n",
    "where fog.event like '%clicks%' AND fog.gender like '%female%'\n",
    "groupby campaign_det\n",
    ") rain\n",
    "where rain.age_det BETWEEN 20 AND 29\n",
    "order by num_event DESC;\n",
    "\n",
    "\n",
    "Output:\n",
    "campaign | event_count\n",
    "\n",
    "---------------------------------------------------------------------------------------------------------------------\n",
    "\n",
    "this is all I did at the collaborative assessment:\n",
    "select * from user_info\n",
    "where age (BETWEEN 20 AND 29) AND gender LIKE '%women%'\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
